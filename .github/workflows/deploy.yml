# .github/workflows/deploy.yml
name: Deploy Telegram Bot (Self-hosted EC2)

on:
  push:
    branches: [ main ]

env:
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Pull latest changes from main
        run: |
          cd /home/ubuntu/telegram-bappenas-bot
          git pull origin main

      - name: Backup database before deployment
        run: |
          cd /home/ubuntu/telegram-bappenas-bot
          if [ -f "data/attendance.db" ]; then
            cp data/attendance.db data/attendance.db.backup.$(date +%Y%m%d_%H%M%S)
            echo "Database backed up successfully"
          else
            echo "No existing database found"
          fi

      - name: Setup virtualenv & install dependencies
        run: |
          cd /home/ubuntu/telegram-bappenas-bot

          # Create virtual environment if not exists
          if [ ! -d "bot_env" ]; then
            echo "Creating virtual environment..."
            python3 -m venv bot_env
          fi

          # Activate virtualenv
          source bot_env/bin/activate

          # Upgrade pip and install requirements
          pip install --upgrade pip
          
          # Install requirements
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            # Fallback install for python-telegram-bot
            pip install python-telegram-bot[job-queue] pytz
          fi

      - name: Create data directory if not exists
        run: |
          cd /home/ubuntu/telegram-bappenas-bot
          mkdir -p data
          chmod 755 data

      - name: Update environment file with bot token
        run: |
          cd /home/ubuntu/telegram-bappenas-bot
          cat > .env << EOF
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          DATABASE_PATH=data/attendance.db
          LOG_LEVEL=INFO
          LOG_FILE=data/bot.log
          EOF
          chmod 600 .env
          echo "Environment file updated with bot token"

      - name: Update systemd service file
        run: |
          cd /home/ubuntu/telegram-bappenas-bot
          if [ -f "telegram-bot.service" ]; then
            sudo cp telegram-bot.service /etc/systemd/system/
            sudo systemctl daemon-reload
            echo "Systemd service updated"
          fi

      - name: Restart Telegram bot service
        run: |
          sudo systemctl restart telegram-bot.service
          sleep 5
          sudo systemctl status telegram-bot.service --no-pager
          sudo journalctl -u telegram-bot.service -n 15 --no-pager

      - name: Check bot health
        run: |
          # Wait a bit for bot to start
          sleep 10
          
          # Check if service is running
          if sudo systemctl is-active --quiet telegram-bot.service; then
            echo "✅ Bot service is running successfully"
          else
            echo "❌ Bot service failed to start"
            sudo journalctl -u telegram-bot.service -n 20 --no-pager
            exit 1
          fi

  notify:
    needs: deploy
    runs-on: self-hosted
    if: always()
    
    steps:
    - name: Notify via curl
      if: always()  # Ensures notification runs even if previous steps fail
      run: |
        STATUS="${{ job.status }}"
        ICON="🚀"
        COLOR="success"
        
        if [ "$STATUS" != "success" ]; then
          ICON="❌"
          COLOR="failure"
        fi
        
        # Escape special characters for Markdown
        COMMIT_MSG=$(echo "${{ github.event.head_commit.message }}" | sed 's/[_*\[`]/\\&/g')
        
        MESSAGE=$(cat <<EOF
        $ICON *Deployment $COLOR*
        📝 *Repository*: \`${{ github.repository }}\`
        🌿 *Branch*: \`${{ github.ref_name }}\`
        👤 *Author*: ${{ github.actor }}
        💬 *Commit*: $COMMIT_MSG
        ⏰ *Time*: ${{ github.event.head_commit.timestamp }}
        🔗 [View Commit](${{ github.event.head_commit.url }})
        📊 *Bot Status*: $(sudo systemctl is-active telegram-bot.service)
        EOF
        )
        
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendMessage" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "parse_mode=Markdown" \
          --data-urlencode "text=$MESSAGE" || echo "Failed to send Telegram notification"